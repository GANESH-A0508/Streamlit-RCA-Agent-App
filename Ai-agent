<h1>AI Agent for Payment Application (Deployable to PCF)</h1>

<h2>Overview</h2>
<p>
This project provides an <em>AI-powered agent</em> for exploring a Paytm-like payment application built with Spring Boot microservices and deployed on PCF.<br/>
The agent analyzes all microservices, their APIs, subsystems, and databases to produce an <strong>end-to-end functional behaviour map</strong> from login to logout.
</p>

<h2>1. Architecture</h2>
<p>High-level components:</p>
<ul>
  <li><strong>Collector:</strong> Gathers PCF app metadata and code.</li>
  <li><strong>Parser & Extractor:</strong> Java Maven project using JavaParser.</li>
  <li><strong>Indexer:</strong> Python script with embeddings + FAISS vector DB.</li>
  <li><strong>Agent:</strong> LangChain-based retrieval QA pipeline.</li>
  <li><strong>Frontend:</strong> Streamlit app for interactive Q&amp;A.</li>
</ul>

<h2>2. Repository Structure</h2>
<ac:structured-macro ac:name="code">
  <ac:plain-text-body><![CDATA[
ai-agent-paymentapp/
├── code-extractor/   (Java Maven Project)
├── indexer/          (Python indexer)
├── agent/            (Agent logic)
├── ui/               (Streamlit UI)
├── requirements.txt
└── output/           (chunks.json, index files)
  ]]></ac:plain-text-body>
</ac:structured-macro>

<h2>3. Java Maven Project — Code Extractor</h2>
<ac:structured-macro ac:name="code">
  <ac:parameter ac:name="language">xml</ac:parameter>
  <ac:parameter ac:name="title">pom.xml</ac:parameter>
  <ac:plain-text-body><![CDATA[
<project xmlns="http://maven.apache.org/POM/4.0.0">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>code-extractor</artifactId>
  <version>1.0-SNAPSHOT</version>
  <dependencies>
    <dependency>
      <groupId>com.github.javaparser</groupId>
      <artifactId>javaparser-core</artifactId>
      <version>3.25.4</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <version>2.15.2</version>
    </dependency>
  </dependencies>
</project>
  ]]></ac:plain-text-body>
</ac:structured-macro>

<p><strong>Usage:</strong></p>
<ac:structured-macro ac:name="code">
  <ac:parameter ac:name="language">bash</ac:parameter>
  <ac:plain-text-body><![CDATA[
mvn clean package
java -cp target/code-extractor-1.0-SNAPSHOT.jar com.example.extractor.App ../springboot-services
  ]]></ac:plain-text-body>
</ac:structured-macro>

<p>Output: <code>output/chunks.json</code></p>

<h2>4. Python Indexer</h2>
<ac:structured-macro ac:name="code">
  <ac:parameter ac:name="language">python</ac:parameter>
  <ac:parameter ac:name="title">indexer/build_index.py</ac:parameter>
  <ac:plain-text-body><![CDATA[
import json, faiss
from sentence_transformers import SentenceTransformer

with open('chunks.json') as f:
    chunks = json.load(f)

texts = [c['description'] for c in chunks]
model = SentenceTransformer('all-MiniLM-L6-v2')
embs = model.encode(texts)

index = faiss.IndexFlatL2(embs.shape[1])
index.add(embs)
faiss.write_index(index, 'chunks.index')
  ]]></ac:plain-text-body>
</ac:structured-macro>

<h2>5. AI Agent (LangChain)</h2>
<ac:structured-macro ac:name="code">
  <ac:parameter ac:name="language">python</ac:parameter>
  <ac:parameter ac:name="title">agent/agent_app.py</ac:parameter>
  <ac:plain-text-body><![CDATA[
from langchain.llms import OpenAI
from langchain.chains import ConversationalRetrievalChain
from langchain.vectorstores import FAISS

llm = OpenAI(temperature=0)
qa = ConversationalRetrievalChain.from_llm(llm, vectorstore.as_retriever())

def answer(query, chat_history=[]):
    return qa({"question": query, "chat_history": chat_history})['answer']
  ]]></ac:plain-text-body>
</ac:structured-macro>

<h2>6. Streamlit Frontend</h2>
<ac:structured-macro ac:name="code">
  <ac:parameter ac:name="language">python</ac:parameter>
  <ac:parameter ac:name="title">ui/app.py</ac:parameter>
  <ac:plain-text-body><![CDATA[
import streamlit as st
from agent.agent_app import answer

st.title("AI Agent — Payment App Explorer")
query = st.text_input("Ask about the system:")
if st.button("Ask"):
    st.write(answer(query))
  ]]></ac:plain-text-body>
</ac:structured-macro>

<p><strong>Run:</strong></p>
<ac:structured-macro ac:name="code">
  <ac:parameter ac:name="language">bash</ac:parameter>
  <ac:plain-text-body><![CDATA[
streamlit run ui/app.py
  ]]></ac:plain-text-body>
</ac:structured-macro>

<h2>7. Deployment to PCF</h2>
<p><em>manifest.yml:</em></p>
<ac:structured-macro ac:name="code">
  <ac:parameter ac:name="language">yaml</ac:parameter>
  <ac:plain-text-body><![CDATA[
applications:
  - name: ai-agent-payment
    memory: 1G
    instances: 1
    path: target/ai-agent-payment-0.0.1-SNAPSHOT.jar
  ]]></ac:plain-text-body>
</ac:structured-macro>

<h2>8. Example Queries</h2>
<ul>
  <li>“Show me the flow for wallet-to-bank transfer”</li>
  <li>“Which DBs are used during login?”</li>
  <li>“What services are called during recharge?”</li>
</ul>

<h2>9. Benefits</h2>
<ul>
  <li>Automated system documentation &amp; discovery</li>
  <li>Developer onboarding support</li>
  <li>Subsystem &amp; DB mapping visibility</li>
  <li>Easy PCF deployment (respects <code>$PORT</code>)</li>
</ul>
